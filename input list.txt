let a = true in let b = and(a,true) in and(and(b, let c = false in a), b, a, c)let



//ok for compilinglet 
let a = false in let b = false in and( let b = and (a,true) in and(and(b,let c = let d = true in d in c), b, a, true))

//compilation: so far so good
let a = true in let b = true in and(and(true, a, b), a)






let a = true in let b = false in and( let b = and (a,true) in and(and(b,let c = let d = true in d in c), b, a, true))

let a = true in let b = a in let c = let d = true in d in a

let a = true in let b = a in let c = let d = true in d in and(let scarafaccio = a in a,b,c)

and(true, let a = true in a)









let a = true in let b = false in and( let b = and (a,true) in and(and(b,let c = let d = true in d in c), b, a, let s = true in a))




//Type d = definition.GetType();
                //if (d == typeof(IdeNode) || d == typeof(Node))
                //{
                //    definition.compile(c, false);
                //    c.AppendLine(";");
                //}
                //else if (d == typeof(LetNode) || d == typeof(AndNode))
                //    //c.AppendLine(definition.eval().ToString() + ";");
                //    definition.compile(c, false);